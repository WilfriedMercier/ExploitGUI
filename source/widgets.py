# -*- coding: utf-8 -*-

import os
import enum
from   typing                    import Any
from   PyQt5.QtWidgets           import QMainWindow, QWidget, QFrame, QLabel, QTextEdit, QPushButton, QComboBox, QSlider, QScrollBar, QSizePolicy, QGridLayout, QBoxLayout, QGraphicsOpacityEffect
from   PyQt5.QtCore              import Qt, QSize, QUrl, pyqtProperty, QPropertyAnimation
from   PyQt5.QtGui               import QMovie, QCursor
from   PyQt5.QtMultimedia        import QMediaContent, QMediaPlayer
from   PyQt5.QtMultimediaWidgets import QVideoWidget

##############################
#       Player classes       #
##############################

class Player(QFrame):
    '''Custom player.'''
    
    def __init__(self, parent: QWidget, *args, **kwargs)-> None:
        '''
        Initialise the widget.
        
        :param QWidget parent: parent widget
        '''
        
        super().__init__(*args, **kwargs)
        
        #: Parent widget
        self.parent  = parent
        
        #: Application
        self.app     = self.parent.parent
        
        #: Projection window
        f_path = os.path.join(os.path.dirname(__file__), f'../data/projections/{self.parent.name}.avi')
        self.projWin = PlayerWindow(self, QMediaContent(QUrl.fromLocalFile(f_path)))
        
        #: Layout
        self.layout  = QGridLayout()
        self.setLayout(self.layout)
        self.buildLayout()
        
    def setTheme(self, theme: str) -> None:
        '''
        Set the given theme to the full layout.
        
        :param str theme: loaded theme
        '''
        
        self.setStyleSheet(theme)
        return
    
    def buildLayout(self, *args, **kwargs):
        '''Set the layout of the widget.'''
        
        # Slider to control the projected video
        self.slider     = QSlider(Qt.Horizontal)
        self.slider.setRange(0, 0)
        self.slider.enterEvent = lambda e: self.parent.setCursor(QCursor(Qt.PointingHandCursor))
        self.slider.leaveEvent = lambda e: self.parent.setCursor(QCursor(Qt.ArrowCursor))
        self.slider.sliderMoved.connect(self.projWin.setPosition)
        self.layout.addWidget(self.slider, 0, 0, 1, 3)
        
        # Previous frame button
        self.prevFrame  = QFrame()
        self.prevLayout = QBoxLayout(QBoxLayout.LeftToRight)
        self.prevFrame.setLayout(self.prevLayout)
        self.layout.addWidget(self.prevFrame, 1, 0)
        self.layout.setColumnStretch(0, 3)
        
        self.prevButton = QPushButton()
        self.prevButton.setIcon(self.app.conf['icons']['arrow_left'])
        self.prevButton.setIconSize(QSize(50, 50))
        self.prevButton.setSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed)
        self.prevButton.enterEvent = lambda e: self.parent.setCursor(QCursor(Qt.PointingHandCursor))
        self.prevButton.leaveEvent = lambda e: self.parent.setCursor(QCursor(Qt.ArrowCursor))
        self.prevLayout.addWidget(self.prevButton, alignment=Qt.AlignRight | Qt.AlignTop)
        
        # Play/Pause button
        self.playFrame  = QFrame()
        self.playLayout = QBoxLayout(QBoxLayout.LeftToRight)
        self.playFrame.setLayout(self.playLayout)
        self.layout.addWidget(self.playFrame, 1, 1)
        self.layout.setColumnStretch(1, 1)
        
        self.playButton = QPushButton()
        self.playButton.setIcon(self.app.conf['icons']['play'])
        self.playButton.setIconSize(QSize(50, 50))
        self.playButton.setSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed)
        
        self.playButton.mousePressEvent = lambda e: self.buttonClicked(self.playButton)
        self.playButton.mouseReleaseEvent = lambda e: self.buttonReleased(self.playButton)
        self.playButton.enterEvent = lambda e: self.parent.setCursor(QCursor(Qt.PointingHandCursor))
        self.playButton.leaveEvent = lambda e: self.parent.setCursor(QCursor(Qt.ArrowCursor))
        self.playLayout.addWidget(self.playButton, alignment=Qt.AlignVCenter | Qt.AlignTop)
        
        # Next frame button
        self.nextFrame  = QFrame()
        self.nextLayout = QBoxLayout(QBoxLayout.LeftToRight) 
        self.nextFrame.setLayout(self.nextLayout)
        self.layout.addWidget(self.nextFrame, 1, 2)
        self.layout.setColumnStretch(2, 3)
        
        self.nextButton = QPushButton()
        self.nextButton.setIcon(self.app.conf['icons']['arrow_right'])
        self.nextButton.setIconSize(QSize(50, 50))
        self.nextButton.setSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed)
        self.nextButton.enterEvent = lambda e: self.parent.setCursor(QCursor(Qt.PointingHandCursor))
        self.nextButton.leaveEvent = lambda e: self.parent.setCursor(QCursor(Qt.ArrowCursor))
        self.nextLayout.addWidget(self.nextButton, alignment=Qt.AlignLeft | Qt.AlignTop)
        return
    
    ######################################################
    #            Start and pause interactions            #
    ######################################################
    
    def buttonClicked(self, button: QPushButton, *args, **kwargs) -> None:
        '''
        Actions taken when a button is clicked.
        
        :param QPushButton button: clicked button
        '''
        
        if button is self.playButton:
            
            if self.projWin.mediaPlayer.state() == QMediaPlayer.PlayingState:
                self.playButton.setIcon(self.app.conf['icons']['pause'])
                self.pause()
                self.showNextPrevButtons()
                
            else:
                self.playButton.setIcon(self.app.conf['icons']['play_small'])
                self.play()
                self.hideNextPrevButtons()
                
        return
                
            
    def buttonReleased(self, button: QPushButton, *args, **kwargs) -> None: 
        '''
        Actions taken when a button is released.
        
        :param QPushButton button: released button
        '''
        
        if button is self.playButton:
            
            if self.projWin.mediaPlayer.state() == QMediaPlayer.PlayingState:
                self.playButton.setIcon(self.app.conf['icons']['pause'])
            else:
                self.playButton.setIcon(self.app.conf['icons']['play'])
                
        return
    
    def firstStart(self, *args, **kwargs) -> None:
        '''Start the animation for the first time.'''
        
        self.buttonClicked(self.playButton)
        self.buttonReleased(self.playButton)
        return
    
    def hideNextPrevButtons(self, *args, **kwargs) -> None:
        '''Hide the next and previous buttons.'''
        
        self.prevButton.hide()
        self.nextButton.hide()
        return
    
    def showNextPrevButtons(self, *args, **kwargs) -> None:
        '''Show the next and previous buttons.'''
        
        self.prevButton.show()
        self.nextButton.show()
        return
        
    def resetButtons(self, *args, **kwargs) -> None:
        '''Reset buttons to initial state.'''
        
        self.playButton.setIcon(self.app.conf['icons']['play'])
        self.hideNextPrevButtons()
        return   
        
    ####################################
    #        Media interactions        #
    ####################################
    
    def pause(self, *args, **kwargs) -> None:
        '''Pause the animation.'''
        
        self.projWin.pause()
        return
    
    def play(self, *args, **kwargs) -> None:
        '''Play the animation.'''
        
        self.projWin.play()
        return
    
    def setSliderLength(self, duration: int, *args, **kwargs) -> None:
        '''
        Update the slider length.
        
        :param int duration: total length in ms
        '''
        
        self.slider.setRange(0, duration)
        return    

    def setSliderPos(self, position: int, *args, **kwargs) -> None:
        '''
        Update the slider position.
        
        :param int position: position in ms
        '''
        
        self.slider.setValue(position)
        return   

    def stop(self, *args, **kwargs) -> None:
        '''Stop the animation, reset buttons and closes the window.'''
        
        self.projWin.stop()
        self.resetButtons() 
        self.projWin.close()
        return
    
class PlayerWindow(QMainWindow):
    '''A simple window showing an animation in full screen for the player.'''
    
    def __init__(self, parent: QWidget, anim: QMediaContent, *args, **kwargs) -> None:
        '''
        Initialise the window.
        
        :param QWidget parent: parent widget
        :param QMediaContent anim: anmation to be played
        '''
        
        super().__init__(*args, **kwargs)
        
        #: Parent widget
        self.parent      = parent
        
        #: QMovie animation
        self.anim        = anim

        #: Video widget
        self.videoWidget =  QVideoWidget(self)
        self.videoWidget.show()
        
        #: Media player object
        self.mediaPlayer = QMediaPlayer()
        self.mediaPlayer.setVideoOutput(self.videoWidget)
        self.mediaPlayer.setMedia(self.anim)
        self.mediaPlayer.setNotifyInterval(1)
    
        self.mediaPlayer.mediaStatusChanged.connect(self.statusChanged)
        self.mediaPlayer.positionChanged.connect(self.positionChanged)
        self.mediaPlayer.durationChanged.connect(self.durationChanged)

        self.setCentralWidget(self.videoWidget)
        
        screen = self.parent.parent.parent.conf['screenCast']
        self.move(screen.left(), screen.top())
        
        self.setStyleSheet('background: black;')
        
    @property
    def duration(self, *args, **kwargs) -> int:
        '''Easy access to player duration in ms.'''
        
        return self.mediaPlayer.duration()
        
    ####################################
    #        Media interactions        #
    ####################################
    
    def durationChanged(self, duration: int, *args, **kwargs) -> None:
        '''Update the slider length in parent widget when the duration changes.'''
        
        self.parent.setSliderLength(duration)
        return
    
    def setPosition(self, position: int, *args, **kwargs) ->None:
        '''Set the position of the media.'''
        
        self.mediaPlayer.setPosition(position)
        return
        
    def statusChanged(self, event: Any, *args, **kwargs) -> None:
        '''Actions taken when the status of the video changed.'''
        
        if event == QMediaPlayer.EndOfMedia:
            print('End of media reached.')
            
        return
    
    def positionChanged(self, position: int, *args, **kwargs) -> None:
        '''Actions taken when the position of the video changed.'''
    
        if position > 0:
            #print(position, self.duration)
            if position >= self.duration-5 and self.mediaPlayer.state() == QMediaPlayer.PlayingState:
            
                position = 0
                self.setPosition(position)
            else:
                self.parent.setSliderPos(position)
        return
    
    ##################################
    #         Media playback         #
    ##################################
    
    def pause(self, *args, **kwargs) -> None:
        '''Pause the animation.'''
        
        self.mediaPlayer.pause()
        return
    
    def play(self, *args, **kwargs) -> None:
        '''Play the animation.'''
        
        if not self.isVisible():
            self.showFullScreen()
        
        self.mediaPlayer.play()
        return
    
    def stop(self,*args, **kwargs) -> None:
        '''Stop the animation.'''
        
        self.mediaPlayer.stop()
        return

#######################
#        Pages        #
#######################

class PageMain(QFrame):
    '''Main page of the application.'''
    
    def __init__(self, parent: QMainWindow, *args, **kwargs) -> None:
        '''
        Initialise the widget.
    
        :param QMainWindow parent: parent widget
        '''
        
        super().__init__(*args, **kwargs)
        
        #: Parent widget
        self.parent     = parent
        
        #: Paint flag
        self.pFlag = False
        
        #: Opacity graphics effect object
        self.op         = QGraphicsOpacityEffect()
        self.opacity    = 0
        self.setGraphicsEffect(self.op)
        
        #: Animation duration is ms
        self.animLength = 500
        
        #: Widget animation
        self.anim = QPropertyAnimation(self, b"opacity")
        self.anim.setDuration(self.animLength)
        
        #: Planets objects dict
        self.planets    = {}
    
        #: Planet labels dict
        self.pLabels    = {}
        
        # Initialise planet instances
        self._makePlanets()
        
        #: Layout
        self.layout     = QBoxLayout(QBoxLayout.TopToBottom)
        self.buildLayout()
        self.setLayout(self.layout)
        
        
    ############################################
    #           Animating the widget           #
    ############################################
    
    def hide(self, *args, **kwargs) -> None:
        '''Actions taken when the page is hidden.'''
        
        # Start the animation
        print('hide', self.opacity)
        self.anim.setStartValue(self.op.opacity())
        self.anim.setEndValue(0)
        self.anim.start()
        
        return
        
    @pyqtProperty(float)
    def opacity(self, *args, **kwargs) -> None:
        '''Return the opacity of the frame.'''
        
        return self.op.opacity()
        
    @opacity.setter
    def opacity(self, opacity: float, *args, **kwargs) -> None:
        '''
        Set the opacity of the entire frame.
        
        :param float opacity: opacity between 0 (transparent) and 1 (plain)
        '''
        
        print('opacity', opacity)
        self.op.setOpacity(opacity)
        
        # Update paint flag
        if opacity <= 0.01:
            self.pFlag = False
        else:
            self.pFlag = True
        return
    
    def paintEvent(self, *args, **kwargs):
        '''Actions taken each time when the page is drawn.'''
    
        # Start the animation
        if not self.pFlag:
            print('paint')
            self.anim.setStartValue(self.op.opacity()+0.01)
            self.anim.setEndValue(1)
            self.anim.start()
        
        return
    
    #########################
    #      Translation      #
    #########################
        
    def setTranslation(self, translation: str) -> None:
        '''
        Set the translation.
        
        :param str translation: text
        '''
        
        # Translate planet titles
        for name, label in self.pLabels.items():
            
            # Get translation
            value = translation[name]
            
            # Set translation
            label.setText(value.capitalize())
            
        return
        
    ################################
    #            Layout            #
    ################################
        
    def buildLayout(self, planetsLine=1, **kwargs) -> None:
        '''
        Draw the layout.
        
        :param int planetsLine: (**Optional**) line in the layout where to draw the planets
        '''
        
        # Draw empty frame to stick animation and labels
        self.layout.addWidget(QFrame(), stretch=3)
        
        # Draw planets
        self.pFrame  = QFrame()
        self.pLayout = QBoxLayout(QBoxLayout.LeftToRight)
        self.pFrame.setLayout(self.pLayout)
        
        self._placePlanets()
        self.layout.addWidget(self.pFrame, stretch=5)
        
        # Draw planets names
        self.nFrame  = QFrame()
        self.nLayout = QBoxLayout(QBoxLayout.LeftToRight)
        self.nFrame.setLayout(self.nLayout)
        
        self._placePlanetNames()
        self.layout.addWidget(self.nFrame, stretch=5)
        
        return
        
    def _makePlanet(self, name: str, movie: QMovie) -> None:
        '''
        Make a single planet widget.
        
        :param str name: name of the planet
        :param QMovie movie: animation
        '''
        
        self.planets[name] = PlanetFrame(self, name, movie)
        return
    
    def _makePlanets(self, *args, **kwargs) -> None:
        '''Make all planet widgets.'''
        
        for name, value in self.parent.conf['planets'].items():
            self._makePlanet(name, value['animation'])
            
        return
    
    def _placePlanet(self, name: str) -> None:
        '''
        Place a single planet in the layout.
        
        :param str name: name of the planet
        '''
        
        if name not in self.planets:
            raise ValueError(f'planet {name} not found in planet dict.')
        
        self.pLayout.addWidget(self.planets[name], alignment=Qt.AlignCenter)
        return
     
    def _placePlanets(self, *args, **kwargs) -> None:
        '''Place all the planets in the layout.'''
        
        for name in self.planets.keys():
            self._placePlanet(name)
            
        return
    
    def _placePlanetName(self, name: str) -> None:
        '''
        Place the name of a planet.
        
        :param str name: name
        '''
        
        if name not in self.planets:
            raise ValueError(f'planet {name} not found in planet dict.')
        
        self.pLabels[name] = QLabel()
        self.pLabels[name].setObjectName('PlanetName')
        self.nLayout.addWidget(self.pLabels[name], alignment=Qt.AlignTop | Qt.AlignHCenter)
        return
            
    def _placePlanetNames(self, *args, **kwargs) -> None:
        '''Place all the planet names.'''
        
        for name in self.planets.keys():
            self._placePlanetName(name)
            
        return

class PagePlanet(QFrame):
    '''Page relative to planets.'''
    
    def __init__(self, parent: QMainWindow, name: str, animation: QMovie, *args, **kwargs) -> None:
        '''
        Initialise the widget.
        
        :param QMainWindow parent: parent widget
        :param str name: planet name
        :param QMovie animation: animation to display
        '''
        
        super().__init__(*args, **kwargs)
        
        #: Parent widget
        self.parent  = parent
        
        #: Name of the planet
        self.name    = name
                
        #: Paint flag
        self.pFlag = False
        
        #: Opacity graphics effect object
        self.op         = QGraphicsOpacityEffect()
        self.opacity    = 0
        self.setGraphicsEffect(self.op)
        
        #: Animation duration is ms
        self.animLength = 500
        
        #: Widget animation
        self.wAnim      = QPropertyAnimation(self, b"opacity")
        self.wAnim.setDuration(self.animLength)
        
        #: QMovie animation
        self.anim    = animation
        
        # Build layout
        self.layout  = QGridLayout()
        self.buildLayout()
        self.setLayout(self.layout)

    ##############################################
    #            Animating the widget            #
    ##############################################
    
    def hide(self, *args, **kwargs) -> None:
        '''Actions taken when the page is hidden.'''
        
        # Start the animation
        print('hide')
        self.wAnim.setStartValue(self.opacity)
        self.wAnim.setEndValue(0)
        self.wAnim.start()
        return
        
    @pyqtProperty(float)
    def opacity(self, *args, **kwargs) -> None:
        '''Return the opacity of the frame.'''
        
        return self.op.opacity()
        
    @opacity.setter
    def opacity(self, opacity: float, *args, **kwargs) -> None:
        '''
        Set the opacity of the entire frame.
        
        :param float opacity: opacity between 0 (transparent) and 1 (plain)
        '''
        
        print('opacity planet', opacity)
        self.op.setOpacity(opacity)
        
        # Update paint flag
        if opacity <= 0.01:
            self.pFlag = False
        else:
            self.pFlag = True
        return
    
    def paintEvent(self, *args, **kwargs):
        '''Actions taken each time when the page is drawn.'''
    
        # Start the animation
        if not self.pFlag:
            self.wAnim.setStartValue(self.opacity+0.01)
            self.wAnim.setEndValue(1)
            self.wAnim.start()
    
    ################################
    #            Layout            #
    ################################
        
    def buildLayout(self, *args, **kwargs) -> None:
        '''Draw the layout.'''
        
        # Information frame and layout
        self.infoF  = QFrame()
        self.infoF.setObjectName('InfoFrame')
        self.infoL  = QBoxLayout(QBoxLayout.LeftToRight)
        self.infoF.setLayout(self.infoL)
        self.layout.addWidget(self.infoF, 0, 0)
        self.layout.setColumnStretch(0, 2)
        
        # Information label
        self.info   = CustomTextEdit(self)
        self.info.setName('Info')
        self.infoL.addWidget(self.info)
        
        # Animation label
        self.label  = QLabel()
        self.label.setSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed)
        self.label.setMovie(self.anim)
        self.layout.addWidget(self.label, 0, 1, alignment=Qt.AlignCenter)
        self.layout.setColumnStretch(1, 1)
        self.layout.setRowStretch(0, 5)
        
        # Video player
        self.player = Player(self)
        self.layout.addWidget(self.player, 1, 0, 1, 2)
        self.layout.setRowStretch(1, 1)
        
        return
    
###############################
#        Other widgets        #
###############################

class CustomTextEdit(QTextEdit):
    '''Custom QTextEdit class.'''
    
    def __init__(self, parent: QWidget, *args, **kwargs) -> None:
        '''
        Initialise the text edit.
        
        :param QWidget parent: parent widget
        '''
        
        super().__init__(*args, **kwargs)
        
        #: Parent widget
        self.parent    = parent
        
        self.setReadOnly(True)
        self.setTextInteractionFlags(Qt.NoTextInteraction)
        self.viewport().setCursor(Qt.ArrowCursor)
        
        self.scrollbar = QScrollBar()
        self.setVerticalScrollBar(self.scrollbar)
        self.scrollbar.hide()
        
    def setName(self, name: str, *args, **kwargs) -> None:
        '''
        Set the name of the QTextEdit and its scrollbar.
        
        :param str name: name of the object
        '''
        
        self.setObjectName(name)
        self.scrollbar.setObjectName(name)
        return
    
    def setInfo(self, text: str, *args, **kwargs) -> None:
        '''Set the text.'''
        
        self.setPlainText(text)
        return
    
    def mousePressEvent(self, event: Any, *args, **kwargs) -> None:
    
        # Position used the first time we click to check the sign of the click and drag movement
        self._yClickPos = event.pos().y()
        
        self.viewport().setCursor(Qt.BlankCursor)
        
        return
    
    def mouseReleaseEvent(self, even: Any, *args, **kwargs) -> None:
    
        # Reset click position just as a consistency check
        self._yClickPos = None
        
        self.viewport().setCursor(Qt.ArrowCursor)
        
        return
    
    def mouseMoveEvent(self, event: Any, *args, **kwargs) -> None:
        '''Actions taken when the mouse is moved after clicking.'''
    
        # Get horizontal scrollbar and its current value
        value  = self.scrollbar.value()
        
        # Set sign for scrollbar motion
        pos    = event.pos().y()
        sign   = 1 if (pos - self._yClickPos) < 0 else -1
        
        # Strength of the scrollbar motion
        delta  = 10
        
        self.scrollbar.setValue(value + delta*sign)
        
        # Update last position
        self._yClickPos = pos
        
        return
    
class PlanetFrame(QFrame):
    '''Frame containing a planet animation and information.'''
    
    def __init__(self, parent: QWidget, name: str, movie: QMovie, *args, **kwargs) -> None:
        '''
        Initialise a single planet widget.
        
        :param QWidget parent: parent widget
        :param str name: name of the planet
        :param QMovie movie: animation
        '''
        
        super().__init__(*args, **kwargs)
        
        #: Parent widget
        self.parent = parent
        
        #: Name of the planet
        self.name   = name
        
        #: Animation
        self.anim   = movie
        
        #: Layout
        self.layout = QGridLayout()
        self.buildLayout()
        self.setLayout(self.layout)
        
    def buildLayout(self, *args, **kwargs) -> None:
        '''Draw the layout.'''
        
        # Define label containing the animation
        self.aLabel  = QLabel()
        self.aLabel.setObjectName(self.name)
        self.aLabel.setSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed)
        self.aLabel.enterEvent = lambda e: self.parent.setCursor(QCursor(Qt.PointingHandCursor))
        self.aLabel.leaveEvent = lambda e: self.parent.setCursor(QCursor(Qt.ArrowCursor))
        self.aLabel.setMovie(self.anim)
        self.anim.start()
        
        # Connect signal
        app = self.parent.parent
        self.aLabel.mousePressEvent = lambda e: app.setPage(app.pages[self.name])
        
        self.layout.addWidget(self.aLabel, 0, 0)
        return

    
class TopBar(QFrame):
    '''Top bar in the main GUI.'''
    
    def __init__(self, parent: QMainWindow, *args, **kwargs) -> None:
        '''
        Initialise the wiget.
        
        :param QMainWindow parent: parent widget
        '''
        
        super().__init__(*args, **kwargs)
        
        #: Parent widget
        self.parent = parent
        
        #: Layout
        self.layout = QBoxLayout(QBoxLayout.LeftToRight)
        self.setLayout(self.layout)
        self.buildLayout()
        self.setupCursors()
        
    def setTheme(self, theme: str) -> None:
        '''
        Set the given theme to the full layout.
        
        :param str theme: loaded theme
        '''
        
        self.setStyleSheet(theme)
        return
    
    def buildLayout(self, *args, **kwargs) -> None:
        '''Set the layout of the widget.'''
        
        #: Return arrow
        self.returnArrow = QPushButton()
        self.returnArrow.setIcon(self.parent.conf['icons']['arrow_left'])
        self.returnArrow.setIconSize(QSize(50, 50))
        self.returnArrow.setSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed)
        self.returnArrow.clicked.connect(self.returnClicked)
        self.layout.addWidget(self.returnArrow, alignment=Qt.AlignLeft)
        
        #: Language selection combobox
        self.langBox     = QComboBox()
        self.langBox.InsertPolicy(QComboBox.NoInsert)
        self.langBox.addItem('FR')
        self.langBox.addItem('EN')
        self.langBox.currentTextChanged.connect(self.parent.setTranslation)
        self.layout.addWidget(self.langBox, alignment=Qt.AlignRight, stretch=2)
        
        #: Close button
        self.closeButton = QPushButton()
        self.closeButton.setIcon(self.parent.conf['icons']['close_button'])
        self.closeButton.setIconSize(QSize(50, 50))
        self.closeButton.setSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed)
        self.closeButton.clicked.connect(self.parent.root.quit)
        self.layout.addWidget(self.closeButton, alignment=Qt.AlignRight)
        
        return
    
    def setupCursors(self, *args, **kwargs) -> None:
        '''Setup the cursors for all the widgets.'''
        
        self.returnArrow.enterEvent = lambda e: self.returnArrow.setCursor(QCursor(Qt.PointingHandCursor))
        self.returnArrow.leaveEvent = lambda e: self.returnArrow.setCursor(QCursor(Qt.ArrowCursor))
        
        self.langBox.enterEvent     = lambda e: self.langBox.setCursor(QCursor(Qt.PointingHandCursor))
        self.langBox.leaveEvent     = lambda e: self.langBox.setCursor(QCursor(Qt.ArrowCursor))
        
        self.closeButton.enterEvent = lambda e: self.closeButton.setCursor(QCursor(Qt.PointingHandCursor))
        self.closeButton.leaveEvent = lambda e: self.closeButton.setCursor(QCursor(Qt.ArrowCursor))
        return
    
    def returnClicked(self, *args, **kwargs):
        '''Actions taken when the return arrow is clicked.'''
        
        page = self.parent.currentPage
        page.player.stop()
        self.parent.setMainPage()
        return
    
class YESNOENUM(enum.Enum):
    
    YES = enum.auto()
    NO  = enum.auto()