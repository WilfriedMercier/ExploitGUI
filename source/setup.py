# -*- coding: utf-8 -*-
from   typing          import Dict, Any
from   PyQt5.QtWidgets import QApplication, QDesktopWidget
from   PyQt5.QtGui     import QMovie, QPixmap, QIcon
import os.path         as     opath
import glob
import yaml

def loadAnimations(path: str, animations: Dict[str, str]) -> Dict[str, QMovie]:
    r'''
    Load the animation files as QMovie objects.
    
    :param str path: path of the animations
    :param dict listAnim: list of animation file names
    
    :returns: list of QMovie animations
    :rtype: dict
    '''
    
    out = {}
    for name, file in animations.items():
        
        fname = opath.join(path, file)
        if not opath.isfile(fname):
            raise IOError(f'File {file} (expanded as {fname}) not found.')
            
        out[name] = QMovie(fname)
        
    return out

def loadBackground(path: str, file: str) -> QPixmap:
    '''
    Load the background image of the application.
    
    :param str path: file path
    :param str file: file name
    
    :returns: image pixmap object
    :rtype: QPixmap
    '''
    
    fname = opath.join(path, file)
    if not opath.isfile(fname):
        raise IOError(f'File {file} (expanded as {fname}) not found.')
    
    return QPixmap(fname)

def loadIcons(path: str) -> Dict[str, Any]:
    '''
    Load the icons of the application.
    
    :param str path: icons path
    :param dict conf: configuration dict
    
    :returns: icons dictionary
    :rtype: dict
    '''
    
    if not opath.isdir(path):
        raise IOError(f'icons path {path} not found.')
        
    iconFiles = glob.glob(opath.join(path, '*.png'))
    return {opath.basename(file).rsplit('.png', maxsplit=1)[0]:QIcon(file) for file in iconFiles}

def loadTheme(path: str, file: str) -> str:
    '''
    Load the theme of the application.
    
    :param str path: file path
    :param str file: file name
    
    :returns: theme string
    :rtype: str
    '''
    
    fname = opath.join(path, file)
    if not opath.isfile(fname):
        raise IOError(f'File {file} (expanded as {fname}) not found.')

    with open(file, 'r') as f:
        return f.read()

def setup(file: str, app: QApplication) -> Dict[str, Any]:
    '''
    Setup the program at startup.
    
    :param str file: configuration file
    :param QApplication app: main application
    
    :returns: configuration dict
    :rtype: dict
    '''
    
    with open(file, 'r') as f:    
        conf = yaml.load(f, Loader=yaml.Loader)
        
    # Load animations
    animations = loadAnimations(conf['animations'], {name:value['file'] for name, value in conf['planets'].items()})
    conf.pop('animations')
    
    for name in conf['planets'].keys():
        conf['planets'][name]['animation'] = animations[name]
        conf['planets'][name].pop('file')
    
    # Load background image
    conf['background'] = loadBackground('', conf['background'])
    
    # Load theme
    conf['theme'] = loadTheme('', conf['theme'])
    
    # Load icons
    conf['icons'] = loadIcons(conf['icons'])
    
    # Setup screen
    numScreens    = app.desktop().screenCount()
    numMain       = conf['screenMain']
    numCast       = conf['screenCast']
    
    # If monitor number is too large, we clip to the last monitor available
    if numMain > numScreens:
        numMain   = numScreens
    
    # If monitor number is too large, we clip to the last monitor available
    if numCast > numScreens:
        numCast   = numScreens
    
    conf['screenMain'] = QDesktopWidget().screenGeometry(numMain)
    conf['screenCast'] = QDesktopWidget().screenGeometry(numCast)
    
    return conf
  
# Debugging
#setup('conf.yaml')