#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Oct 13 22:39:59 2021

@author: wilfried
"""

import sys
import os.path         as     opath
from   PyQt5.QtWidgets import QMainWindow, QApplication, QWidget, QGridLayout, QLabel, QSizePolicy, QFrame
from   PyQt5.QtGui     import QPainter, QMovie, QCursor
from   PyQt5.QtCore    import Qt
from   source.setup    import setup
from   source.widgets  import TopBar, PlanetFrame

class App(QMainWindow):
    r'''Main application.'''

    def __init__(self, root: QApplication, iconsPath: str = 'icons', **kwargs) -> None:
        
        self.root    = root
        super().__init__(**kwargs)
        
        # Load setup properties
        self.conf    = setup(opath.join('source', 'conf.yaml'), root)
        
        # Main widget and its layout
        self.win     = QWidget()
        self.layout  = QGridLayout()
        self.win.setLayout(self.layout)
        self.setCentralWidget(self.win)
        
        # Initialise planets/Sun instances
        self.planets = {}
        self._makePlanets()
        
        # Top bar
        self.topbar  = TopBar(self)
        
        # Set theme
        self.setTheme(self.conf['theme'])
        
        # Build layout
        self.buildLayout()
        
        # Move window to main monitor
        self.move(self.conf['screenMain'].left(), self.conf['screenMain'].top())
        self.show()
        self.showFullScreen()
        
    def setTheme(self, theme: str) -> None:
        '''
        Set the given theme to the full layout.
        
        :param str theme: loaded theme
        '''
        
        self.win.setStyleSheet(theme)
        self.topbar.setTheme(theme)
        return
    
    @property
    def maxPlanetsPosition(self, *args, **kwargs) -> int:
        '''Return the maximum column number associated to a planet.'''
        
        return len(self.conf['planets'])
        
    ################################
    #            Layout            #
    ################################
    
    def buildLayout(self, planetsLine=1, **kwargs) -> None:
        '''
        Draw the layout.
        
        :param int planetsLine: (**Optional**) line in the layout where to draw the planets
        '''
        
        # Draw planets first
        self._placePlanets(line=planetsLine)
        self.layout.setRowStretch(planetsLine, 10)
        
        # Draw top bar
        self.layout.addWidget(self.topbar, 0, 0, 1, self.maxPlanetsPosition)
        self.layout.setRowStretch(0, 1)
        
        return
    
    def _makePlanet(self, name: str, movie: QMovie) -> None:
        '''
        Make a single planet widget.
        
        :param str name: name of the planet
        :param QMovie movie: animation
        '''
        
        self.planets[name] = PlanetFrame(self, name, movie)
        return
    
    def _makePlanets(self, *args, **kwargs) -> None:
        '''Make all planet widgets.'''
        
        for name, value in self.conf['planets'].items():
            self._makePlanet(name, value['animation'])
            
        return
    
    def _placePlanet(self, name: str, pos: int, line=1) -> None:
        '''
        Place a single planet in the layout.
        
        :param str name: name of the planet
        :param int pos: position of the planet (from left to right)
        :param int line: (**Optional**) line in the layout where to draw the planets
        '''
        
        if name not in self.planets:
            raise ValueError(f'planet {name} not found in planet dict.')
        
        self.layout.addWidget(self.planets[name], line, pos)
        return
     
    def _placePlanets(self, line: int=1, **kwargs) -> None:
        '''
        Place all the planets in the layout.
        
        :param int line: (**Optional**) line in the layout where to draw the planets
        '''
        
        for name, value in self.conf['planets'].items():
            self._placePlanet(name, value['position'], line=line)
            
        return
        
    ###########################################
    #        Built-in method overwrite        #
    ###########################################

    def paintEvent(self, pe, *args, **kwargs):
        '''Paint the background of the main window.'''
        
        width  = self.centralWidget().width()
        height = self.centralWidget().height()
        pixmap = self.conf['background'].scaled(width, height)
       
        paint  = QPainter(self)
        paint.drawPixmap(0, 0, pixmap)
       


if __name__ == '__main__':
   root   = QApplication(sys.argv)
   app    = App(root)
   sys.exit(root.exec_())
