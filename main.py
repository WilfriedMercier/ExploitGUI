#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Oct 13 22:39:59 2021

@author: wilfried
"""

import sys
import os.path         as     opath
from   PyQt5.QtWidgets import QMainWindow, QApplication, QWidget, QFrame, QBoxLayout, QStackedLayout, QScrollArea
from   PyQt5.QtGui     import QPainter
from   typing          import Any

from   source.setup    import setup
from   source.widgets  import TopBar, PageMain, PagePlanet
from   source.backend  import loadTranslation

class App(QMainWindow):
    r'''Main application.'''

    def __init__(self, root: QApplication, iconsPath: str = 'icons', **kwargs) -> None:
        
        self.root    = root
        super().__init__(**kwargs)
        
        # Load setup properties
        self.conf    = setup(opath.join('source', 'conf.yaml'), root)
        
        # Main widget and its layout
        self.win     = QWidget()
        self.area = QScrollArea()
        self.area.setWidget(self.win)
        self.area.setWidgetResizable(True)
        self.setCentralWidget(self.area)
        
        #: Main layout
        self.layout  = QBoxLayout(QBoxLayout.TopToBottom)
        self.win.setLayout(self.layout)
        
        #: Main frame
        self.mainFrame = QFrame()
        
        #: Main frame layout changing when clicking on a planet
        self.cLayout = QStackedLayout()
        self.mainFrame.setLayout(self.cLayout)

        # Top bar
        self.topbar  = TopBar(self)
        
        # Draw top bar and main frame
        self.layout.addWidget(self.topbar,    stretch=1)
        self.layout.addWidget(self.mainFrame, stretch=8)
        
        #: Pages dict
        self.pages   = {}
        self.buildPages()
        # Build layout
        self.buildLayout()
        
        # Set init page
        self.setPage(self.mainPage)
        
        # Set theme
        self.setTheme(self.conf['theme'])
        
        # Set translation
        self.setTranslation('fr')
        
        # Move window to main monitor
        self.move(self.conf['screenMain'].left(), self.conf['screenMain'].top())
        self.showFullScreen()
        
    ##################################
    #     Theme and translations     #
    ##################################
    
    def setTranslation(self, translationFile: str) -> None:
        
        file        = f'{translationFile.lower()}.yaml'
        translation = loadTranslation('language', file)
        
        # Translate planet titles in main page
        self.mainPage.setTranslation(translation)
            
        return
        
    def setTheme(self, theme: str) -> None:
        '''
        Set the given theme to the full layout.
        
        :param str theme: loaded theme
        '''
        
        self.win.setStyleSheet(theme)
        self.topbar.setTheme(theme)
        
    ######################
    #       Layout       #
    ######################
    
    @property
    def currentPage(self, *args, **kwargs) -> Any:
        '''Return the current page.'''
        
        return self.cLayout.currentWidget()
    
    def buildLayout(self, *args, **kwargs) -> None:
        '''Draw layout.'''
        
        for page in self.pages.values():
            self.cLayout.addWidget(page)
        
        return
    
    def buildPages(self, *args, **kwargs) -> None:
        '''Generate the panes for each planet.'''
        
        # Main scene page
        self.pages['main'] = PageMain(self)
        
        # Generate a dict mapping planet name to planet animation
        self.planetsAnim   = {name:planet.anim for name, planet in self.pages['main'].planets.items()}
        
        # Planet pages
        for name, anim in self.planetsAnim.items():
            self.pages[name] = PagePlanet(self, name, anim)
            
        return
    
    @property
    def mainPage(self, *args, **kwargs) -> PageMain:
        '''Return the main page from the page list.'''
        
        return self.pages['main']
    
    def setMainPage(self, *args, **kwargs) -> None:
        '''Set the main page as current page.'''
        
        self.setPage(self.mainPage)
        return
    
    def setPage(self, widget: QWidget, *args, **kwargs) -> None:
        '''
        Set the page of the layout.
        
        :param QWidget widget: widget used to set the page
        '''
        
        if widget is self.mainPage:
            self.topbar.returnArrow.setVisible(False)
        else:
            self.topbar.returnArrow.setVisible(True)
            
            # Start the animation without the user having to click
            widget.player.firstStart()
        
        self.cLayout.setCurrentWidget(widget)
        return
        
    ###########################################
    #        Built-in method overwrite        #
    ###########################################

    def paintEvent(self, pe, *args, **kwargs):
        '''Paint the background of the main window.'''
        
        width  = self.centralWidget().width()
        height = self.centralWidget().height()
        pixmap = self.conf['background'].scaled(width, height)
       
        paint  = QPainter(self)
        paint.drawPixmap(0, 0, pixmap)
       


if __name__ == '__main__':
   root   = QApplication(sys.argv)
   app    = App(root)
   sys.exit(root.exec_())
