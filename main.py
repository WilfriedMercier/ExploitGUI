#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Oct 13 22:39:59 2021

@author: wilfried
"""

import sys
import os.path         as     opath
from   PyQt5.QtWidgets import QMainWindow, QApplication, QWidget, QGridLayout, QLabel, QSizePolicy, QPushButton, QFrame
from   PyQt5.QtGui     import QPainter, QMovie, QCursor
from   PyQt5.QtCore    import Qt, QSize
from   source.setup    import setup

class App(QMainWindow):
    r'''Main application.'''

    def __init__(self, root: QApplication, iconsPath: str = 'icons', **kwargs) -> None:
        
        self.root    = root
        super().__init__(**kwargs)
        
        # Load setup properties
        self.conf    = setup(opath.join('source', 'conf.yaml'), root)
        
        # Main widget and its layout
        self.win     = QWidget()
        self.layout  = QGridLayout()
        
        self.frame = QFrame()
        self.layout.addWidget(self.frame, 1, 0, 1, 2)
        
        # Initialise planets/Sun instances
        self.planets = {}
        self._initPlanets()
        
        # Add close button
        self.closeButton = QPushButton()
        self.closeButton.setIcon(self.conf['icons']['close_button'])
        self.closeButton.setIconSize(QSize(50, 50))
        self.closeButton.setSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed)
        self.closeButton.clicked.connect(self.root.quit)
        
        
        
        
        # Set theme
        self.setTheme(self.conf['theme'])
        
        # Build layout(s)
        self.win.setLayout(self.layout)
        self.setCentralWidget(self.win)
        
        # Move window to main monitor
        self.move(self.conf['screenMain'].left(), self.conf['screenMain'].top())
        self.show()
        self.showFullScreen()
        
    def setTheme(self, theme: str) -> None:
        '''
        Set the given theme to the full layout.
        
        :param str theme: loaded theme
        '''
        
        self.win.setStyleSheet(theme)
        return
        
    ##############################
    #      Planets handling      #
    ##############################
    
    def _makePlanet(self, name: str, movie: QMovie) -> None:
        
        self.planets[name] = QLabel()
        self.planets[name].setObjectName(name)
        self.planets[name].setSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed)
        self.planets[name].enterEvent = lambda e: self.setCursor(QCursor(Qt.PointingHandCursor))
        self.planets[name].leaveEvent = lambda e: self.setCursor(QCursor(Qt.ArrowCursor))
        self.planets[name].setMovie(movie)
        movie.start()
        return
    
    def _placePlanet(self, name: str, pos: int, line=2) -> None:
        
        if name not in self.planets:
            raise ValueError(f'planet {name} not found in planet dict.')
        
        # We add a frame first to expand horizontally and vertically
        frame  = QFrame()
        self.layout.addWidget(frame, line, pos)
        
        widget = self.planets[name]
        layout  = QGridLayout()
        layout.addWidget(widget)
        frame.setLayout(layout)
        return
        
    def _initPlanets(self, *args, **kwargs) -> None:
        
        for name, value in self.conf['planets'].items():
            
            pos  = value['position']
            anim = value['animation'] 
            
            # Make planet
            self._makePlanet(name, anim)
            
            # Place planet in layout
            self._placePlanet(name, pos)
            
        return
        
    ###########################################
    #        Built-in method overwrite        #
    ###########################################

    def paintEvent(self, pe, *args, **kwargs):
        '''Paint the background of the main window.'''
        
        width  = self.centralWidget().width()
        height = self.centralWidget().height()
        pixmap = self.conf['background'].scaled(width, height)
       
        paint  = QPainter(self)
        paint.drawPixmap(0, 0, pixmap)
       


if __name__ == '__main__':
   root   = QApplication(sys.argv)
   app    = App(root)
   sys.exit(root.exec_())
