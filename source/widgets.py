# -*- coding: utf-8 -*-

from PyQt5.QtWidgets import QWidget, QMainWindow, QFrame, QLabel, QPushButton, QSizePolicy, QGridLayout, QBoxLayout
from PyQt5.QtCore    import Qt, QSize  
from PyQt5.QtGui     import QMovie, QCursor

class PagePlanet(QWidget):
    
    def __init__(self, parent: QMainWindow, name: str, animation: QMovie, *args, **kwargs) -> None:
        '''
        Initialise the wiget.
        
        :param QMainWindow parent: parent widget
        :param str name: planet name
        :param QMovie animation: animation to display
        '''
        
        super().__init__(*args, **kwargs)
        
        #: Parent widget
        self.parent = parent
        
        #: Name of the planet
        self.name   = name
        
        #: QMovie animation
        self.anim   = animation
        
        # Place label with animation
        self.label  = QLabel()
        self.planets[name].setSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed)
        self.planets[name].setMovie(self.anim)
        
        self.layout  = QGridLayout()
        self.setLayout(self.layout)
        
        
    def paintEvent(self, event): 
        
        print('coucou')
        return
    
class PlanetFrame(QFrame):
    '''Frame containing a planet animation and information.'''
    
    def __init__(self, parent: QMainWindow, name: str, movie: QMovie, *args, **kwargs) -> None:
        '''
        Initialise a single planet widget.
        
        :param QMainWindow parent: parent window
        :param str name: name of the planet
        :param QMovie movie: animation
        '''
        
        super().__init__(*args, **kwargs)
        
        #: Parent window
        self.parent = parent
        
        #: Name of the planet
        self.name   = name
        
        #: Animation
        self.anim   = movie
        
        #: Layout
        self.layout = QGridLayout()
        self.buildLayout()
        self.setLayout(self.layout)
        
    def buildLayout(self, *args, **kwargs):
        '''Draw the layout.'''
        
        # Define label containing the animation
        self.label  = QLabel()
        self.label.setObjectName(self.name)
        self.label.setSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed)
        self.label.enterEvent = lambda e: self.parent.setCursor(QCursor(Qt.PointingHandCursor))
        self.label.leaveEvent = lambda e: self.parent.setCursor(QCursor(Qt.ArrowCursor))
        self.label.setMovie(self.anim)
        self.anim.start()
        
        # Define label containing the name of the planet
        self.Tlabel = QLabel(f'{self.name[0].upper()}{self.name[1:]}')
        self.Tlabel.setObjectName('PlanetName')
        self.Tlabel.setSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed)
        
        self.layout.addWidget(self.label,  0, 0)
        self.layout.addWidget(self.Tlabel, 1, 0, alignment=Qt.AlignHCenter | Qt.AlignTop)
        self.layout.setRowStretch(0, 1)
        self.layout.setRowStretch(1, 20)
    
class TopBar(QFrame):
    '''Top bar in the main GUI.'''
    
    def __init__(self, parent: QMainWindow, *args, **kwargs) -> None:
        '''
        Initialise the wiget.
        
        :param QMainWindow parent: parent widget
        '''
        
        super().__init__(*args, **kwargs)
        
        #: Parent widget
        self.parent = parent
        
        print(self.parent.root)
        
        #: Layout
        self.layout = QBoxLayout(QBoxLayout.LeftToRight)
        self.setLayout(self.layout)
        
        # Draw widgets in layout
        self.buildLayout()
        
    def setTheme(self, theme: str) -> None:
        '''
        Set the given theme to the full layout.
        
        :param str theme: loaded theme
        '''
        
        self.setStyleSheet(theme)
        return
    
    def buildLayout(self, *args, **kwargs) -> None:
        '''Set the layout of the widget.'''
        
        # Add close button
        self.closeButton = QPushButton()
        self.closeButton.setIcon(self.parent.conf['icons']['close_button'])
        self.closeButton.setIconSize(QSize(50, 50))
        self.closeButton.setSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed)
        self.closeButton.clicked.connect(self.parent.root.quit)
        self.layout.addWidget(self.closeButton, alignment=Qt.AlignRight)
        
        return
        