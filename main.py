#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Oct 13 22:39:59 2021

@author: wilfried
"""

import sys
import os.path         as     opath
from   PyQt5.QtWidgets import QMainWindow, QApplication, QWidget, QFrame, QBoxLayout, QStackedLayout, QScrollArea
from   PyQt5.QtGui     import QPainter, QCursor
from   PyQt5.QtCore    import Qt, QTimer
from   typing          import Any

from   source.setup    import setup
from   source.widgets  import TopBar, PageMain, PagePlanet, YESNOENUM
from   source.backend  import loadTranslation

class App(QMainWindow):
    r'''Main application.'''

    def __init__(self, root: QApplication, iconsPath: str = 'icons', **kwargs) -> None:
        
        super().__init__(**kwargs)
        
        self.root      = root
        self._initFlag = YESNOENUM.NO
        
        # Remove mouse tracking and integrate click and move interaction
        self.setMouseTracking(False)
        
        # Load setup properties
        self.conf      = setup(opath.join('source', 'conf.yaml'), root)

        # Main widget
        self.win       = QWidget()
        self.setCentralWidget(self.win)
    
        #: Main layout
        self.layout    = QBoxLayout(QBoxLayout.TopToBottom)
        self.win.setLayout(self.layout)
    
        #: Main frame
        self.mainFrame = QFrame()
        
        #: Main frame layout changing when clicking on a planet
        self.cLayout = QStackedLayout()
        self.mainFrame.setLayout(self.cLayout)
        
        self.area = QScrollArea()
        self.area.setWidget(self.mainFrame)
        self.area.setWidgetResizable(True)
        self.area.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.area.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        
        # Values used to drag the interface
        self._clickSign = True
        self._xClickPos = 0

        # Top bar
        self.topbar  = TopBar(self)
        
        # Draw top bar and main frame
        self.layout.addWidget(self.topbar,    stretch=1)
        self.layout.addWidget(self.area, stretch=8)
        
        #: Pages dict
        self.pages   = {}
        self.buildPages()
        
        # Build layout
        self.buildLayout()
        
        # Set theme
        self.setTheme(self.conf['theme'])
        
        # Set translation
        self.setTranslation('fr')
        
        # Move window to main monitor
        self.move(self.conf['screenMain'].left(), self.conf['screenMain'].top())
        self.showFullScreen()
        
    ##################################
    #     Theme and translations     #
    ##################################
    
    def setTranslation(self, translationFile: str) -> None:
        
        file        = f'{translationFile.lower()}.yaml'
        translation = loadTranslation('language', file)
        
        for name, page in self.pages.items():

            # Translate planet titles in main page
            if name == 'main':                    
                trans = {key: value['name'] for key, value in translation.items()}
                self.mainPage.setTranslation(trans)
            else:
                #print(translation[name])
                trans = translation[name]['info']
                page.info.setInfo(trans)
            
        return
        
    def setTheme(self, theme: str) -> None:
        '''
        Set the given theme to the full layout.
        
        :param str theme: loaded theme
        '''
        
        self.area.setStyleSheet(theme)
        self.win.setStyleSheet(theme)
        self.topbar.setTheme(theme)
        
    ######################
    #       Layout       #
    ######################
    
    @property
    def currentPage(self, *args, **kwargs) -> Any:
        '''Return the current page.'''
        
        return self.cLayout.currentWidget()
    
    def buildLayout(self, *args, **kwargs) -> None:
        '''Draw layout.'''
        
        for page in self.pages.values():
            self.cLayout.addWidget(page)
        
        return
    
    def buildPages(self, *args, **kwargs) -> None:
        '''Generate the panes for each planet.'''
        
        # Main scene page
        self.pages['main'] = PageMain(self)
        
        # Generate a dict mapping planet name to planet animation
        self.planetsAnim   = {name:planet.anim for name, planet in self.pages['main'].planets.items()}
        
        # Planet pages
        for name, anim in self.planetsAnim.items():
            self.pages[name] = PagePlanet(self, name, anim)
            
        return
    
    @property
    def mainPage(self, *args, **kwargs) -> PageMain:
        '''Return the main page from the page list.'''
        
        return self.pages['main']
    
    def setMainPage(self, *args, **kwargs) -> None:
        '''Set the main page as current page.'''
        
        self.setPage(self.mainPage)
        return
    
    def setPage(self, widget: QWidget, *args, **kwargs) -> None:
        '''
        Set the page of the layout.
        
        :param QWidget widget: widget used to set the page
        '''
        
        def setWidget(*args, **kwargs):
            print('set widget', widget)
            widget.opacity = 0.01
            return self.cLayout.setCurrentWidget(widget)
        
        if widget is self.mainPage:
            # Hide return arrow in top bar
            self.topbar.returnArrow.setVisible(False)
            
            self.mainFrame.setMinimumWidth(self.centralWidget().width()*2)
        else:
            # Show return arrow in top bar
            self.topbar.returnArrow.setVisible(True)
            
            self.mainFrame.setMinimumWidth(self.centralWidget().width()*0.9)
            
            # Start the animation without the user having to click
            widget.player.firstStart()
        
        # Hide current page
        self.currentPage.hide()
        print('setting page', widget)
        
        # Wait for the previous widget to be completely hidden before starting showing the new one
        QTimer().singleShot(self.currentPage.animLength+500, setWidget)
        return
        
    ###########################################
    #        Built-in method overwrite        #
    ###########################################
    
    def mousePressEvent(self, event: Any, *args, **kwargs) -> None:
        
        if self.currentPage is self.mainPage:
            
            # Position used the first time we click to check the sign of the click and drag movement
            self._xClickPos = event.pos().x()
            
            self.win.setCursor(QCursor(Qt.PointingHandCursor))
            
        return
    
    def mouseReleaseEvent(self, even: Any, *args, **kwargs) -> None:
        
        if self.currentPage is self.mainPage:
            
            # Reset click position just as a consistency check
            self._xClickPos = None
            
            self.win.setCursor(QCursor(Qt.ArrowCursor))
            #self.topbar.setupCursors()
            
        return
    
    def mouseMoveEvent(self, event: Any, *args, **kwargs) -> None:
        '''Actions taken when the mouse is moved after clicking.'''
        
        if self.currentPage is self.mainPage:
            
            # Get horizontal scrollbar and its current value
            scroll = self.area.horizontalScrollBar()
            value  = scroll.value()
            
            # Set sign for scrollbar motion
            pos    = event.pos().x()
            sign   = 1 if (pos - self._xClickPos) < 0 else -1
            
            # Strength of the scrollbar motion
            delta  = 20
            
            scroll.setValue(value + delta*sign)
            
            # Update last position
            self._xClickPos = pos
            
        return

    def paintEvent(self, pe, *args, **kwargs):
        '''Paint the background of the main window.'''
        
        width     = self.centralWidget().width()
        height    = self.centralWidget().height()
        pixmap    = self.conf['background'].scaled(width, height)
        
        # Redraw the main page at startup once
        if self._initFlag == YESNOENUM.NO:
            self._initFlag = YESNOENUM.YES
            self.setMainPage()

        paint  = QPainter(self)
        paint.drawPixmap(0, 0, pixmap)
       


if __name__ == '__main__':
   root   = QApplication(sys.argv)
   app    = App(root)
   sys.exit(root.exec_())
