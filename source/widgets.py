# -*- coding: utf-8 -*-

from PyQt5.QtWidgets import QMainWindow, QWidget, QFrame, QLabel, QPushButton, QComboBox, QSlider, QSizePolicy, QGridLayout, QBoxLayout
from PyQt5.QtCore    import Qt, QSize  
from PyQt5.QtGui     import QMovie, QCursor

#######################
#        Pages        #
#######################

class PageMain(QFrame):
    '''Main page of the application.'''
    
    def __init__(self, parent: QMainWindow, *args, **kwargs) -> None:
        '''
        Initialise the widget.
    
        :param QMainWindow parent: parent widget
        '''
        
        super().__init__(*args, **kwargs)
        
        #: Parent widget
        self.parent = parent
        
        #: Planets objects dict
        self.planets = {}
    
        #: Planet labels dict
        self.pLabels = {}
        
        # Initialise planet instances
        self._makePlanets()
        
        #: Layout
        self.layout  = QBoxLayout(QBoxLayout.TopToBottom)
        self.buildLayout()
        self.setLayout(self.layout)
        
    def setTranslation(self, translation: str) -> None:
        
        # Translate planet titles
        for name, label in self.pLabels.items():
            
            # Get translation
            value = translation[name]
            
            # Set translation
            label.setText(value.capitalize())
            
        return
        
    ################################
    #            Layout            #
    ################################
        
    def buildLayout(self, planetsLine=1, **kwargs) -> None:
        '''
        Draw the layout.
        
        :param int planetsLine: (**Optional**) line in the layout where to draw the planets
        '''
        
        # Draw empty frame to stick animation and labels
        self.layout.addWidget(QFrame(), stretch=3)
        
        # Draw planets
        self.pFrame  = QFrame()
        self.pLayout = QBoxLayout(QBoxLayout.LeftToRight)
        self.pFrame.setLayout(self.pLayout)
        
        self._placePlanets()
        self.layout.addWidget(self.pFrame, stretch=5)
        
        # Draw planets names
        self.nFrame  = QFrame()
        self.nLayout = QBoxLayout(QBoxLayout.LeftToRight)
        self.nFrame.setLayout(self.nLayout)
        
        self._placePlanetNames()
        self.layout.addWidget(self.nFrame, stretch=5)
        
        return
        
    def _makePlanet(self, name: str, movie: QMovie) -> None:
        '''
        Make a single planet widget.
        
        :param str name: name of the planet
        :param QMovie movie: animation
        '''
        
        self.planets[name] = PlanetFrame(self, name, movie)
        return
    
    def _makePlanets(self, *args, **kwargs) -> None:
        '''Make all planet widgets.'''
        
        for name, value in self.parent.conf['planets'].items():
            self._makePlanet(name, value['animation'])
            
        return
    
    def _placePlanet(self, name: str) -> None:
        '''
        Place a single planet in the layout.
        
        :param str name: name of the planet
        '''
        
        if name not in self.planets:
            raise ValueError(f'planet {name} not found in planet dict.')
        
        self.pLayout.addWidget(self.planets[name], alignment=Qt.AlignCenter)
        return
     
    def _placePlanets(self, *args, **kwargs) -> None:
        '''Place all the planets in the layout.'''
        
        for name in self.planets.keys():
            self._placePlanet(name)
            
        return
    
    def _placePlanetName(self, name: str) -> None:
        '''
        Place the name of a planet.
        
        :param str name: name
        '''
        
        if name not in self.planets:
            raise ValueError(f'planet {name} not found in planet dict.')
        
        self.pLabels[name] = QLabel()
        self.pLabels[name].setObjectName('PlanetName')
        self.nLayout.addWidget(self.pLabels[name], alignment=Qt.AlignTop | Qt.AlignHCenter)
        return
            
    def _placePlanetNames(self, *args, **kwargs) -> None:
        '''Place all the planet names.'''
        
        for name in self.planets.keys():
            self._placePlanetName(name)
            
        return

class PagePlanet(QFrame):
    '''Page relative to planets.'''
    
    def __init__(self, parent: QMainWindow, name: str, animation: QMovie, *args, **kwargs) -> None:
        '''
        Initialise the widget.
        
        :param QMainWindow parent: parent widget
        :param str name: planet name
        :param QMovie animation: animation to display
        '''
        
        super().__init__(*args, **kwargs)
        
        #: Parent widget
        self.parent = parent
        
        #: Name of the planet
        self.name   = name
        
        #: QMovie animation
        self.anim   = animation
        
        # Build layout
        self.layout  = QGridLayout()
        self.buildLayout()
        self.setLayout(self.layout)
        
    def buildLayout(self, *args, **kwargs) -> None:
        '''Draw the layout.'''
        
        # Animation label
        self.label  = QLabel()
        self.label.setSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed)
        self.label.setMovie(self.anim)
        self.layout.addWidget(self.label, 0, 0, alignment=Qt.AlignCenter)
        
        # Video player
        self.player = Player(self)
        self.layout.addWidget(self.player, 1, 0)
        
        return
    
###############################
#        Other widgets        #
###############################
    
class PlanetFrame(QFrame):
    '''Frame containing a planet animation and information.'''
    
    def __init__(self, parent: QWidget, name: str, movie: QMovie, *args, **kwargs) -> None:
        '''
        Initialise a single planet widget.
        
        :param QWidget parent: parent widget
        :param str name: name of the planet
        :param QMovie movie: animation
        '''
        
        super().__init__(*args, **kwargs)
        
        #: Parent window
        self.parent = parent
        
        #: Name of the planet
        self.name   = name
        
        #: Animation
        self.anim   = movie
        
        #: Layout
        self.layout = QGridLayout()
        self.buildLayout()
        self.setLayout(self.layout)
        
    def buildLayout(self, *args, **kwargs) -> None:
        '''Draw the layout.'''
        
        # Define label containing the animation
        self.aLabel  = QLabel()
        self.aLabel.setObjectName(self.name)
        self.aLabel.setSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed)
        self.aLabel.enterEvent = lambda e: self.parent.setCursor(QCursor(Qt.PointingHandCursor))
        self.aLabel.leaveEvent = lambda e: self.parent.setCursor(QCursor(Qt.ArrowCursor))
        self.aLabel.setMovie(self.anim)
        self.anim.start()
        
        # Connect signal
        app = self.parent.parent
        self.aLabel.mousePressEvent = lambda e: app.setPage(app.pages[self.name])
        
        self.layout.addWidget(self.aLabel, 0, 0)
    
class TopBar(QFrame):
    '''Top bar in the main GUI.'''
    
    def __init__(self, parent: QMainWindow, *args, **kwargs) -> None:
        '''
        Initialise the wiget.
        
        :param QMainWindow parent: parent widget
        '''
        
        super().__init__(*args, **kwargs)
        
        #: Parent widget
        self.parent = parent
        
        #: Layout
        self.layout = QBoxLayout(QBoxLayout.LeftToRight)
        self.setLayout(self.layout)
        self.buildLayout()
        
    def setTheme(self, theme: str) -> None:
        '''
        Set the given theme to the full layout.
        
        :param str theme: loaded theme
        '''
        
        self.setStyleSheet(theme)
        return
    
    def buildLayout(self, *args, **kwargs) -> None:
        '''Set the layout of the widget.'''
        
        #: Return arrow
        self.returnArrow = QPushButton()
        self.returnArrow.setIcon(self.parent.conf['icons']['arrow_left'])
        self.returnArrow.setIconSize(QSize(50, 50))
        self.returnArrow.setSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed)
        self.returnArrow.enterEvent = lambda e: self.parent.setCursor(QCursor(Qt.PointingHandCursor))
        self.returnArrow.leaveEvent = lambda e: self.parent.setCursor(QCursor(Qt.ArrowCursor))
        self.returnArrow.clicked.connect(lambda e: self.parent.setPage(self.parent.mainPage))
        self.layout.addWidget(self.returnArrow, alignment=Qt.AlignLeft)
        
        #: Language selection combobox
        self.langBox     = QComboBox()
        self.langBox.InsertPolicy(QComboBox.NoInsert)
        self.langBox.addItem('FR')
        self.langBox.addItem('EN')
        self.langBox.enterEvent = lambda e: self.parent.setCursor(QCursor(Qt.PointingHandCursor))
        self.langBox.leaveEvent = lambda e: self.parent.setCursor(QCursor(Qt.ArrowCursor))
        self.langBox.currentTextChanged.connect(self.parent.setTranslation)
        self.layout.addWidget(self.langBox, alignment=Qt.AlignRight, stretch=2)
        
        #: Close button
        self.closeButton = QPushButton()
        self.closeButton.setIcon(self.parent.conf['icons']['close_button'])
        self.closeButton.setIconSize(QSize(50, 50))
        self.closeButton.setSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed)
        self.closeButton.clicked.connect(self.parent.root.quit)
        self.closeButton.enterEvent = lambda e: self.parent.setCursor(QCursor(Qt.PointingHandCursor))
        self.closeButton.leaveEvent = lambda e: self.parent.setCursor(QCursor(Qt.ArrowCursor))
        self.layout.addWidget(self.closeButton, alignment=Qt.AlignRight)
        
        return
    
class Player(QFrame):
    '''Custom player.'''
    
    def __init__(self, parent: QWidget, *args, **kwargs)-> None:
        '''
        Initialise the widget.
        
        :param QWidget parent: parent widget
        '''
        
        super().__init__(*args, **kwargs)
        
        #: Parent widget
        self.parent = parent
        
        #: Layout
        self.layout = QGridLayout()
        self.setLayout(self.layout)
        self.buildLayout()
        
    def setTheme(self, theme: str) -> None:
        '''
        Set the given theme to the full layout.
        
        :param str theme: loaded theme
        '''
        
        self.setStyleSheet(theme)
        return
    
    def buildLayout(self, *args, **kwargs):
        '''Set the layout of the widget.'''
        
        self.slider = QSlider(Qt.Horizontal)
        self.layout.addWidget(self.slider, 0, 0)
        return
        